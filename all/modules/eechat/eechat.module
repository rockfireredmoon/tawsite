<?php
/**
 * @file
 * Module file for eechat.
 */

/**
 * @defgroup eechat Earth Eternal: Block
 * @ingroup earth_eternal
 * @{
 * Blocks for Earth Eternal chat integration.
 */
function eechat_menu() {
	$items ['creditshop'] = array (
			'page callback' => 'eechat_creditshop',
			'access callback' => TRUE,
			'title' => 'Credit Shop' 
	);
	
	$items ['leaderboard'] = array (
			'page callback' => 'eechat_leaderboard',
			'access callback' => TRUE,
			'title' => 'Leaderboard' 
	);
	
	$items ['character'] = array (
			'page callback' => 'eechat_character',
			'access callback' => TRUE,
			'title' => 'Character Profile' 
	);
	
	$items ['clan'] = array (
			'page callback' => 'eechat_clan',
			'access callback' => TRUE,
			'title' => 'Clan Profile' 
	);
	
	$items ['clans'] = array (
			'page callback' => 'eechat_clans',
			'access callback' => TRUE,
			'title' => 'Clans' 
	);
	
	$items ['guild'] = array (
			'page callback' => 'eechat_guild',
			'access callback' => TRUE,
			'title' => 'Guild Profile' 
	);
	
	$items ['guilds'] = array (
			'page callback' => 'eechat_guilds',
			'access callback' => TRUE,
			'title' => 'Guilds' 
	);
	
	$items ['chat'] = array (
			'page callback' => 'drupal_get_form', //this is the function that will be called when the page is accessed.  for a form, use drupal_get_form
			'page arguments' => array('eechat_chat_form'), //put the name of the form here */ 
			'access callback' => TRUE,
			'title' => 'Chat' 
	);
	
	$items ['buy'] = array (
			'page callback' => 'drupal_get_form',
			'page arguments' => array('eechat_buy_form'), //put the name of the form here */
			'access callback' => TRUE,
			'title' => 'Buy Credit Shop Item' 
	);
	
	return $items;
}

function eechat_chat_submit_callback($form, $form_state) {
	$data = array (
			'msg' => urlencode($form_state['values']['message']),
			'from' => urlencode($form_state['values']['character']),
			'channel' => urlencode($form_state['values']['channel']),
	);
	list ( $data, $request_headers ) = _doHTTP ( "/chat", "POST", $data );
	
	$chat = json_decode ( $data );
	$markup =  _render_chat($chat);
	$element = $form['box'];
	$markup = str_replace("'", "\'", $markup );
	$element['#markup'] = "<script type=\"text/javascript\">document.getElementById('block-eechat-eefullchat-chat').innerHTML = '<ul>" . $markup . "</ul>' ; document.getElementById('edit-message').value = ''; </script>"; 
	return $element;
}

function eechat_chat_form($form, &$form_state) {
	/* Get characters */
	global $user;
	$urlp = "/user/" . urlencode ( $user->name );
	list ( $data, $request_headers ) = _doHTTP ( $urlp );
	
	if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
		$userdata = json_decode ( $data );
		$options = array();
		if($userdata->characters != null) {
			// Populate channel list
			$channels = array();
			if(in_array("administrator", $user->roles)) {
				$channels["*SysChat"] = "SysChat";
			}
			if(in_array("sages", $user->roles) || in_array("administrator", $user->roles)) {
				$channels["gm/earthsages"] = "Sage";
			}
			$channels['rc/'] = 'Region';
			$channels['tc/'] = 'Trade';
			
			// TODO won't work till server side chat buffer holds clan messages too
			//$channels['clan'] = 'Clan';
			
			// Populate character list
			foreach ($userdata->characters as $character) {
				$options[$character->name] = $character->name;
			}
			asort($options);

			$form['character'] = array(
					'#type' => 'select',
					'#title' => t('Character'),
					'#options' => $options,
					'#description' => t('The character which to send the chat message as.')
			);
			
			$form['message'] = array(
					'#title' => t('says'),
					'#type' => 'textfield',
					'#required' => TRUE,
					'#maxlength' => 252,
			);
			
			$form['channel'] = array(
					'#type' => 'select',
					'#title' => t('In'),
					'#options' => $channels,
					'#description' => t('The channel on which to send the chat message.'),
					'#default_value' => 'rc/',
			);
			
			$form['box'] = array(
					'#type' => 'markup',
				    '#prefix' => '<div id="box">',
				    '#suffix' => '</div>',
					'#markup' => '',
			);
			
			$form['submit_button'] = array(
					'#type' => 'submit',
					'#value' => 'Send',
					'#ajax' => array(
							'callback' => 'eechat_chat_submit_callback',
							'wrapper' => 'box',
							'event' => 'click'
					),
			);
			
		}
		else {
			form_set_error('message', t('You must create a character in-game to be able to chat from the website.'));
		}
	}
	
	
	return $form;
}

function eechat_buy_form($form, &$form_state) {
	$parts = explode("/", request_path());
	$itemname = $parts[sizeof($parts) - 1];
	

	/* Get item */
	$urlp = "/cs/" . urlencode ( $itemname );
	list ( $data, $request_headers ) = _doHTTP ( $urlp );
	if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
		$itemdata = json_decode ( $data );
	}
	else {
		form_set_error('message', t('Unable to retrieve credit shop data.'));
		return $form;
	}
	
	/* Get characters */
	global $user;
	$urlp = "/user/" . urlencode ( $user->name );
	list ( $data, $request_headers ) = _doHTTP ( $urlp );

	if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
		$userdata = json_decode ( $data );
	}
	else {
		form_set_error('message', t('Unable to retrieve credit shop data.'));
		return $form;
	}

	if($userdata->characters === null) {
		form_set_error('message', t('You must create a character in-game to be able to buy items from the website.'));
		return $form;
	}
	
	$options = array();
	// Populate character list
	foreach ($userdata->characters as $character) {
		$options[$character->name] = $character->name;
	}
	asort($options);
	$form['shopitem'] = array(
			'#type' => 'markup',
			'#markup' => _render_cs_item($itemdata),
	);
	

	$form['character'] = array(
			'#type' => 'select',
			'#title' => t('Character'),
			'#options' => $options,
			'#description' => t('The character which to send the item to.')
	);
		
	$form['qty'] = array(
			'#title' => t('Quantity'),
			'#type' => 'textfield',
			'#required' => TRUE,
			'#maxlength' => 4,
			'#default_value' => "1",
	);
		
	$form['item'] = array(
			'#title' => t('Quantity'),
			'#type' => 'hidden',
			'#required' => TRUE,
			'#default_value' => $itemname,
	);
	
		
	/*
	$form['box'] = array(
			'#type' => 'markup',
			'#prefix' => '<div id="box">',
			'#suffix' => '</div>',
			'#markup' => '',
	);
		
	$form['submit_button'] = array(
			'#type' => 'submit',
			'#value' => 'Send',
			'#ajax' => array(
					'callback' => 'eechat_chat_submit_callback',
					'wrapper' => 'box',
					'event' => 'click'
			),
	);
	*/
	$form['submit_button'] = array(
			'#type' => 'submit',
			'#value' => 'Buy!'
	);


	return $form;
}

function eechat_buy_form_validate($form, &$form_state) {
}

function eechat_buy_form_submit($form, &$form_state) {
	$data = array (
			'qty' => urlencode($form_state['values']['qty']),
			'item' => urlencode($form_state['values']['item']),
			'character' => urlencode($form_state['values']['character']),
	);
	list ( $data, $request_headers ) = _doHTTP ( "/cs", "POST", $data );
	if (isset ( $request_headers->http_code ) && $request_headers->http_code == 200) {
		drupal_set_message("Item purchased.", $type = 'status');
	}
	else {
		form_set_error('message', t('Failed to buy item. ') . " " . $data);
	}
}


function eechat_clan($id) {
	$urlp = "/clan/" . urlencode ( $id );
	list ( $data, $request_headers ) = _doHTTP ( $urlp );
	$markup = "<div id=\"block-eechat-clan\">\n";
	if (isset ( $request_headers->http_code ) && $request_headers->http_code == 0) {
		$markup = $markup . t ( 'Earth Eternal is OFFLINE' );
	} else if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
		$clandata = json_decode ( $data );
		
		$markup = $markup . "<h2 class=\"clan-name\">" . $clandata->name . "</h2>\n";
		$markup = $markup . "<h4 class=\"motd\">" . $clandata->motd . "</h4>\n";
		//$markup = $markup . "<h4 class=\"status\">" . $characterdata->status . "</h4>\n";
		
		$markup = $markup . "<div class=\"fancy-separator\"></div>\n";
		
		// Date Created
		$markup = $markup . "<div class=\"created\">\n";
		$markup = $markup . "<span class=\"created-label clan-label\">Date Created</span>\n";
		$markup = $markup . "<span class=\"created-value clan-value\">" . date ( "Y-m-d, h:i A", $clandata->createdTime ) . "</span>\n";
		$markup = $markup . "</div>\n";
		
		$markup = $markup . "<div class=\"fancy-separator\"></div>\n";
		
		// Stats
		$markup = $markup . "<div class=\"player-stats\">\n";
		$markup = $markup . _get_stats_html ( $clandata->playerStats );
		$markup = $markup . "</div>\n";
		$markup = $markup . "<div class=\"fancy-separator\"></div>\n";
		
		// Roster
		$markup = $markup . "<h2 class=\"members\">Members</h3>\n";
		$markup = $markup . "<table class=\"member-table\">\n";
		foreach ( $clandata->members as $member ) {
			$markup = $markup . "<tr class=\"member-row\">\n";

			$markup = $markup . "<td class=\"rank rank-" . strtolower(_get_rank($member->rank)) . "\">" . _get_rank($member->rank) . "</td>\n";
			$markup = $markup . "<td class=\"member-name\"><a href=\"/character/" . urlencode ($member->name) . "\">" . $member->name . "</a></td>\n";
			$markup = $markup . "<td class=\"member-level\">" . $member->level . "</td>\n";
			$markup = $markup . "</tr>\n";
		}
		$markup = $markup . "</table>\n";
		
	} else {
		if ($request_headers->http_code == 404) {
			$markup = $markup . "<div class=\"no-clan\">";
			$markup = $markup . "This clan does not exist.";
			$markup = $markup . "</div>\n";
		} else {
			$markup = t ( 'Earth Eternal clan not available. ' . $id . '. Status %status', array (
					'%status' => $request_headers->http_code 
			) );
		}
	}
	$markup = $markup . "</div>\n";
	
	$page = array (
			'#type' => 'markup',
			'#markup' => $markup 
	);
	return $page;
}

function eechat_guild($id) {
	$urlp = "/guild/" . urlencode ( $id );
	list ( $data, $request_headers ) = _doHTTP ( $urlp );
	$markup = "<div id=\"block-eechat-guild\">\n";
	if (isset ( $request_headers->http_code ) && $request_headers->http_code == 0) {
		$markup = $markup . t ( 'Earth Eternal is OFFLINE' );
	} else if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
		$guilddata = json_decode ( $data );

		$markup = $markup . "<h2 class=\"guild-name\">" . $guilddata->name . "</h2>\n";
		$markup = $markup . "<h4 class=\"motto\">" . $guilddata->motto . "</h4>\n";
		//$markup = $markup . "<h4 class=\"status\">" . $characterdata->status . "</h4>\n";

		$markup = $markup . "<div class=\"fancy-separator\"></div>\n";

		// Stats
		//$markup = $markup . "<div class=\"player-stats\">\n";
		//$markup = $markup . _get_stats_html ( $clandata->playerStats );
		//$markup = $markup . "</div>\n";
		//$markup = $markup . "<div class=\"fancy-separator\"></div>\n";

		// Roster
		//$markup = $markup . "<h2 class=\"members\">Members</h3>\n";
		//$markup = $markup . "<table class=\"member-table\">\n";
		//foreach ( $clandata->members as $member ) {
//			$markup = $markup . "<tr class=\"member-row\">\n";
//
	//		$markup = $markup . "<td class=\"rank rank-" . strtolower(_get_rank($member->rank)) . "\">" . _get_rank($member->rank) . "</td>\n";
		//	$markup = $markup . "<td class=\"member-name\"><a href=\"/character/" . urlencode ($member->name) . "\">" . $member->name . "</a></td>\n";
			//$markup = $markup . "<td class=\"member-level\">" . $member->level . "</td>\n";
			//$markup = $markup . "</tr>\n";
		//}
		//$markup = $markup . "</table>\n";

	} else {
		if ($request_headers->http_code == 404) {
			$markup = $markup . "<div class=\"no-guild\">";
			$markup = $markup . "This guild does not exist.";
			$markup = $markup . "</div>\n";
		} else {
			$markup = t ( 'Earth Eternal guild not available. ' . $id . '. Status %status', array (
					'%status' => $request_headers->http_code
			) );
		}
	}
	$markup = $markup . "</div>\n";

	$page = array (
			'#type' => 'markup',
			'#markup' => $markup
	);
	return $page;
}

function eechat_character($id = '0') {
	$urlp = "/character/" . urlencode ( $id );
	list ( $data, $request_headers ) = _doHTTP ( $urlp );
	$markup = "<div id=\"block-eechat-character\">\n";
	if (isset ( $request_headers->http_code ) && $request_headers->http_code == 0) {
		$markup = $markup . t ( 'Earth Eternal is OFFLINE' );
	} else if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
		$characterdata = json_decode ( $data );
		
		$markup = $markup . "<h2 class=\"character-name\">" . $characterdata->cdef->css->display_name . "</h2>\n";
		$markup = $markup . "<h3 class=\"level\">Level " . $characterdata->cdef->css->level . "</h3>\n";
		$markup = $markup . "<h4 class=\"status\">" . $characterdata->status . "</h4>\n";
		if(isset ( $characterdata->clanName)) {
			$markup = $markup . "<h5 class=\"clan\"><a href=\"/clan/" . $characterdata->clanName . "\">A member of Clan " . $characterdata->clanName . "</a></h4>\n";
			
		}
		
		$markup = $markup . "<div class=\"fancy-separator\"></div>\n";
		
		// Date Created
		$markup = $markup . "<div class=\"created\">\n";
		$markup = $markup . "<span class=\"created-label character-profile-label\">Date Created</span>\n";
		$markup = $markup . "<span class=\"created-value character-profile-value\">" . date ( "Y-m-d, h:i A", $characterdata->createdTime ) . "</span>\n";
		$markup = $markup . "</div>\n";
		
		// Date Last Logged In
		$markup = $markup . "<div class=\"last-login\">\n";
		$markup = $markup . "<span class=\"last-login-label character-profile-label\">Last Seen</span>\n";
		$markup = $markup . "<span class=\"last-login-value character-profile-value\">" . $characterdata->lastLogon . "</span>\n";
		$markup = $markup . "</div>\n";
		
		// Race 
		$markup = $markup . "<div class=\"race\">\n";
		$markup = $markup . "<span class=\"race-label character-profile-label\">Race</span>\n";
		$markup = $markup . "<span class=\"race-value character-profile-value\"><a href=\"/" . strtolower(_get_race_name($characterdata->appearance->r)) . "\">" . _get_race_name($characterdata->appearance->r) . "</a></span>\n";
		$markup = $markup . "</div>\n";
		
		// Class
		$markup = $markup . "<div class=\"charclass\">\n";
		$markup = $markup . "<span class=\"charclass-label character-profile-label\">Class</span>\n";
		
		$markup = $markup . "<span class=\"charclass-value character-profile-value\">" . _get_class_name ( $characterdata->cdef->css->profession ) . "</span>\n";
		$markup = $markup . "</div>\n";

		$markup = $markup . "<div class=\"fancy-separator\"></div>\n";
		
		// Stats
		$markup = $markup . "<div class=\"player-stats\">\n";
		$markup = $markup . _get_stats_html ( $characterdata->playerStats );
		$markup = $markup . "</div>\n";
	} else {
		if ($request_headers->http_code == 404) {
			$markup = $markup . "<div class=\"no-character\">";
			$markup = $markup . "This character does not exist.";
			$markup = $markup . "</div>\n";
		} else {
			$markup = t ( 'Earth Eternal character not available. ' . $id . '. Status %status', array (
					'%status' => $request_headers->http_code 
			) );
		}
	}
	$markup = $markup . "</div>\n";
	
	$page = array (
			'#type' => 'markup',
			'#markup' => $markup 
	);
	return $page;
}

function eechat_creditshop($category = 'consumables', $start = 0) {
	drupal_add_js ( drupal_get_path ( 'module', 'eechat' ) . '/js/eeleaderboard.js' );
	$urlp = "/cs?category=" . strtoupper($category) . "&count=100&start=" . $start;
	list ( $data, $request_headers ) = _doHTTP ( $urlp );
	$markup = "<div id=\"block-eechat-creditshop\">\n";
	if (isset ( $request_headers->http_code ) && $request_headers->http_code == 0) {
		$markup = $markup . t ( 'Earth Eternal is OFFLINE' );
	} else if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
		$creditshopdata = json_decode ( $data );

		$markup = $markup . "<p class=\"credit-shop-help helpbox\">\n";
		$markup = $markup . "The credit shop is our special store for items that are not restricted by your progress through \n";
		$markup = $markup . "the game, i.e. you can usually buy items at any level. It consists of both cosmetic and \n";
		$markup = $markup . "gameplay affecting items. Some items required credits, some require gold, and some require both! \n";
		$markup = $markup . "You can also access the credit shop in game by clicking on the <i>Credit Shop</i> in your toolbar.\n";
		$markup = $markup . "</p class=\"credit-shop-help helpbox\">\n";
		
		if ($creditshopdata->data != null) {

			
			$markup = $markup . "<div class=\"credit-shop-category\">\n";
			foreach ( $creditshopdata->data as $shopitem ) {
				$markup = $markup . _render_cs_item($shopitem, true);
			}
			$markup = $markup . "</div>\n";
		} else {
			$markup = $markup . "<div class=\"creditshop-not-ready\">\n";
			$markup = $markup . "The credit shop is not ready, please wait.";
			$markup = $markup . "</div>\n";
		}
	} else {
		if ($request_headers->http_code == 404) {
			$markup = $markup . "<div class=\"no-leaderboard\">";
			$markup = $markup . "This credit shop does not exist.";
			$markup = $markup . "</div>\n";
		} else {
			$markup = t ( 'Earth Eternal credit shop not available. ' . $account->name . '. Status %status', array (
					'%status' => $request_headers->http_code
			) );
		}
	}
	$markup = $markup . "</div>\n";

	$page = array (
			'#type' => 'markup',
			'#markup' => $markup
	);
	return $page;
}

function eechat_leaderboard($board = 'character', $sort = 'kills', $start = 0) {
	drupal_add_js ( drupal_get_path ( 'module', 'eechat' ) . '/js/eeleaderboard.js' );
	$urlp = "/leaderboard?board=" . $board . "&start=" . $start . "&sort=" . $sort;
	list ( $data, $request_headers ) = _doHTTP ( $urlp );
	$markup = "<div id=\"block-eechat-leaderboard\">\n";
	if (isset ( $request_headers->http_code ) && $request_headers->http_code == 0) {
		$markup = $markup . t ( 'Earth Eternal is OFFLINE' );
	} else if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
		$leaderdata = json_decode ( $data );
		
		if ($leaderdata->data != null) {
			
			$markup = $markup . "<table class=\"leader-table\">\n";
			foreach ( $leaderdata->data as $leader ) {
				$markup = $markup . "<tr class=\"leader-row\">\n";
				$markup = $markup . "<td class=\"leader-rank\">" . $leader->rank . "</td>\n";
				$markup = $markup . "<td><a href=\"/character/" . urlencode ($leader->name) . "\">" . $leader->name . "</a></td>\n";
				switch($sort) {
					case 'kills':
						$markup = $markup . "<td>" . $leader->stats->kills . "</td>\n";
						break;
					case 'deaths':
						$markup = $markup . "<td>" . $leader->stats->deaths . "</td>\n";
						break;
					case 'pvpKills':
						$markup = $markup . "<td>" . $leader->stats->pvpKills . "</td>\n";
						break;
					case 'pvpDeaths':
						$markup = $markup . "<td>" . $leader->stats->pvpDeaths . "</td>\n";
						break;
				}
				$markup = $markup . "</tr>\n";
			}
			$markup = $markup . "</table>\n";
			$markup = $markup . "<div class=\"fancy-separator\"></div>\n";
			$markup = $markup . "<div class=\"leader-actions\">\n";
			$size = sizeof($leaderdata->data);
			if($start + 10 < $size)
				$markup = $markup . "<a href=\"/leaderboard/" . $board . "/" . $sort . "/" . ( $start + 10 ) . "\" class=\"leader-actions\">Next</a>\n";
			if($start > 0)
				$markup = $markup . "<a href=\"/leaderboard/" . $board . "/" . $sort . "/" . max(0, $start - 10 ) . "\" class=\"leader-actions\">Previous</a>\n";
			$markup = $markup . "</div>\n";
		} else {
			$markup = $markup . "<div class=\"leaderboard-not-ready\">\n";
			$markup = $markup . "The leaderboard is not ready, please wait.";
			$markup = $markup . "</div>\n";
		}
	} else {
		if ($request_headers->http_code == 404) {
			$markup = $markup . "<div class=\"no-leaderboard\">";
			$markup = $markup . "This leaderboard does not exist.";
			$markup = $markup . "</div>\n";
		} else {
			$markup = t ( 'Earth Eternal leaderboard not available. ' . $account->name . '. Status %status', array (
					'%status' => $request_headers->http_code 
			) );
		}
	}
	$markup = $markup . "</div>\n";
	
	$page = array (
			'#type' => 'markup',
			'#markup' => $markup 
	);
	return $page;
}


function eechat_clans($start = 0) {
	drupal_add_js ( drupal_get_path ( 'module', 'eechat' ) . '/js/eeleaderboard.js' );
	$urlp = "/clans?start=" . $start;
	list ( $data, $request_headers ) = _doHTTP ( $urlp );
	$markup = "<div id=\"block-eechat-clans\">\n";
	$markup = $markup . "<p class=\"helpbox clans-description\">\n";
	$markup = $markup . "Clans are one of the two social groupings available to players. Where <a href=\"guilds\">Guilds</a> are fixed ";
	$markup = $markup . "groupings of players, membership of which will affect gameplay, Clans are different in that anybody can form one and "; 
	$markup = $markup . "gameplay is not affected. You could think of your fellow <i>Clan</i> as your family, and your <i>Guild</i> as your colleagues!";
	$markup = $markup . "</p>\n";
	$markup = $markup . "<div class=\"fancy-separator\"></div>\n";
	if (isset ( $request_headers->http_code ) && $request_headers->http_code == 0) {
		$markup = $markup . t ( 'Earth Eternal is OFFLINE' );
	} else if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
		$clansdata = json_decode ( $data );

		$markup = $markup . "<table class=\"clans-table\">\n";
		$markup = $markup . "<thead>\n";
		$markup = $markup . "<tr>\n";
		$markup = $markup . "<td>Name</td>\n";
		$markup = $markup . "<td>Leader</td>\n";
		$markup = $markup . "<td>Members</td>\n";
		$markup = $markup . "</tr>\n";
		$markup = $markup . "</thead>\n";
		$markup = $markup . "<tbody>\n";
		foreach ( $clansdata as $clan ) {
			$markup = $markup . "<tr class=\"clans-row\">\n";
			$markup = $markup . "<td class=\"clan-name\"><a href=\"/clan/" . urlencode ($clan->name) . "\">" . $clan->name . "</a></td>\n";
			$markup = $markup . "<td class=\"clan-leader\"><a href=\"/character/" . urlencode ($clan->leader->name) . "\">" . $clan->leader->name . "</a></td>\n";
			$markup = $markup . "<td class=\"clan-size\">" . $clan->size . "</td>\n";
			$markup = $markup . "</tr>\n";
		}
		$markup = $markup . "</tbody>\n";
		$markup = $markup . "</table>\n";
		$markup = $markup . "<div class=\"fancy-separator\"></div>\n";
		$markup = $markup . "<div class=\"clans-actions\">\n";
		$size = sizeof($clansdata);
		if($start + 10 < $size)
			$markup = $markup . "<a href=\"/leaderboard/" . $board . "/" . $sort . "/" . ( $start + 10 ) . "\" class=\"leader-actions\">Next</a>\n";
		if($start > 0)
			$markup = $markup . "<a href=\"/leaderboard/" . $board . "/" . $sort . "/" . max(0, $start - 10 ) . "\" class=\"leader-actions\">Previous</a>\n";
		$markup = $markup . "</div>\n";
	} else {
		if ($request_headers->http_code == 404) {
			$markup = $markup . "<div class=\"no-clans\">";
			$markup = $markup . "No clans exist.";
			$markup = $markup . "</div>\n";
		} else {
			$markup = t ( 'Earth Eternal clans not available. ' . $account->name . '. Status %status', array (
					'%status' => $request_headers->http_code
			) );
		}
	}
	$markup = $markup . "</div>\n";

	$page = array (
			'#type' => 'markup',
			'#markup' => $markup
	);
	return $page;
}

function eechat_guilds($start = 0) {
	drupal_add_js ( drupal_get_path ( 'module', 'eechat' ) . '/js/eeleaderboard.js' );
	$urlp = "/guilds?start=" . $start;
	list ( $data, $request_headers ) = _doHTTP ( $urlp );
	$markup = "<div id=\"block-eechat-guilds\">\n";
	$markup = $markup . "<p class=\"helpbox guilds-description\">\n";
	$markup = $markup . "Guilds are one of the two social groupings available to players. Where <a href=\"/clans\">Clans</a> are informal ";
	$markup = $markup . "groupings of players, Guilds are different in that guilds are pre-formed and being a member of one will affect the quest ";
	$markup = $markup . "that you are able to perform and other gameplay affecting mechanics. You could think of your fellow <i>Clan</i> as your family, and your <i>Guild</i> as your colleagues!";
	$markup = $markup . "</p>\n";
	$markup = $markup . "<div class=\"fancy-separator\"></div>\n";
	if (isset ( $request_headers->http_code ) && $request_headers->http_code == 0) {
		$markup = $markup . t ( 'Earth Eternal is OFFLINE' );
	} else if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
		$guildsdata = json_decode ( $data );

		$markup = $markup . "<table class=\"guilds-table\">\n";
		$markup = $markup . "<thead>\n";
		$markup = $markup . "<tr>\n";
		$markup = $markup . "<td>Name</td>\n";
		$markup = $markup . "<td>Type</td>\n";
		$markup = $markup . "<td>Motto</td>\n";
		$markup = $markup . "</tr>\n";
		$markup = $markup . "</thead>\n";
		$markup = $markup . "<tbody>\n";
		foreach ( $guildsdata as $guild ) {
			$markup = $markup . "<tr class=\"guild-row\">\n";
			$markup = $markup . "<td class=\"guild-name\"><a href=\"/guild/" . urlencode ($guild->name) . "\">" . $guild->name . "</a></td>\n";
			$markup = $markup . "<td class=\"guild-type\">" . $guild->type . "</td>\n";
			$markup = $markup . "<td class=\"guild-motto\">" . $guild->motto . "</td>\n";
			$markup = $markup . "</tr>\n";
		}
		$markup = $markup . "</tbody>\n";
		$markup = $markup . "</table>\n";
		$markup = $markup . "<div class=\"fancy-separator\"></div>\n";
	} else {
		if ($request_headers->http_code == 404) {
			$markup = $markup . "<div class=\"no-clans\">";
			$markup = $markup . "No guilds exist.";
			$markup = $markup . "</div>\n";
		} else {
			$markup = t ( 'Earth Eternal guilds not available. ' . $account->name . '. Status %status', array (
					'%status' => $request_headers->http_code
			) );
		}
	}
	$markup = $markup . "</div>\n";

	$page = array (
			'#type' => 'markup',
			'#markup' => $markup
	);
	return $page;
}

function eechat_block_info() {
	$blocks ['eechat'] = array (
			'info' => t ( 'Earth Eternal Chat' ),
			'cache' => DRUPAL_CACHE_PER_ROLE 
	);
	
	$blocks ['eefullchat'] = array (
			'info' => t ( 'Earth Eternal Full Chat' ),
			'cache' => DRUPAL_CACHE_PER_ROLE
	);
	
	$blocks ['eewho'] = array (
			'info' => t ( 'Earth Eternal Who' ),
			'cache' => DRUPAL_CACHE_PER_ROLE 
	);
	
	$blocks ['eeaccountinfo'] = array (
			'info' => t ( 'Earth Eternal Account Info' ),
			'cache' => DRUPAL_CACHE_PER_ROLE 
	);
	
	return $blocks;
}
function eechat_block_configure($delta = '') {
	$form = array ();
	if ($delta == 'eechat' || $delta == 'eefullchat' || $delta == 'eewho' || $delta == 'eeaccountinfo') {
		$form ['eechat_url'] = array (
				'#type' => 'textfield',
				'#title' => t ( 'Server API URL' ),
				'#size' => 60,
				'#description' => t ( 'The HTTP API URL of the Planet Forever server. For example http://server.theanubianwar.com/api' ),
				'#default_value' => variable_get ( 'eechat_url', t ( 'http://server.theanubianwar.com/api' ) ) 
		);
	}
	return $form;
}
function eechat_block_save($delta = '', $edit = array()) {
	if ($delta == 'eechat' || $delta == 'eefullchat' || $delta == 'eewho' || $delta == 'eeaccountinfo') {
		variable_set ( 'eechat_url', $edit ['eechat_url'] );
	}
}

function eechat_block_view($delta = '') {
	// The $delta parameter tells us which block is being requested.
	switch ($delta) {
		case 'eefullchat' :
		case 'eechat' :
			$block ['subject'] = t ( 'Earth Eternal Chat' );
			$block ['content'] = eechat_contents ( $delta );
			drupal_add_js ( drupal_get_path ( 'module', 'eechat' ) . '/js/eechat.js' );
			break;
		case 'eewho' :
			$block ['subject'] = t ( 'Earth Eternal Who' );
			$block ['content'] = eechat_contents ( $delta );
			drupal_add_js ( drupal_get_path ( 'module', 'eechat' ) . '/js/eewho.js' );
			break;
		case 'eeaccountinfo' :
			$block ['subject'] = t ( 'Earth Eternal Account' );
			$block ['content'] = eechat_contents ( $delta );
			/* drupal_add_js(drupal_get_path('module', 'eechat') . '/js/eewho.js'); */
			break;
	}
	return $block;
}
function eechat_contents($which_block) {
	switch ($which_block) {
		
		case 'eewho' :
			list ( $data, $request_headers ) = _doHTTP ( "/who" );
			if (isset ( $request_headers->http_code ) && $request_headers->http_code == 0) {
				$result = array (
						'#markup' => t ( 'Earth Eternal is OFFLINE' ) 
				);
			} else if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
				$who = json_decode ( $data );
				$markup = "<div id=\"block-eechat-eewho-who\">\n<ul>\n";
				foreach ( $who as $name => $info ) {
					$markup = $markup . "<li>" . htmlentities ( $name ) . "</li>\n";
				}
				$markup = $markup . "</ul>\n</div>\n";
				$result = array (
						'#markup' => $markup 
				);
			} else {
				$result = array (
						'#markup' => t ( 'Earth Eternal online player list unavailable. Status %status', array (
								'%status' => $request_headers->http_code 
						) ) 
				);
			}
			return $result;
		
		case 'eechat' :
		case 'eefullchat' :
			list ( $data, $request_headers ) = _doHTTP ( "/chat" );
			if (isset ( $request_headers->http_code ) && $request_headers->http_code == 0) {
				$result = array (
						'#markup' => t ( 'Earth Eternal live chat is OFFLINE' ) 
				);
			} else if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
				$chat = json_decode ( $data );
				$markup = "<div id=\"block-eechat-" . $which_block . "-chat\" class=\"chat-area\">\n<ul>\n";
				if($chat != null) {
					$markup = $markup . _render_chat($chat);
				}
				$markup = $markup . "</ul>\n";
				$markup = $markup . "</div>\n";
				if($which_block == 'eechat') {
					$markup = $markup . "<div class=\"full-chat-info\">\n";
					$markup = $markup . "<a href=\"/chat\">Chat Now!</a>\n";
					$markup = $markup . "</div>\n";
				}
				$markup = $markup . "<script type=\"text/javascript\">\n";
				$markup = $markup . "var objDiv = document.getElementById(\"block-eechat-" . $which_block . "-chat\");";
				$markup = $markup . "objDiv.scrollTop = document.chatScrollPos ? document.chatScrollPos : objDiv.scrollHeight;\n";
				$markup = $markup . "objDiv.addEventListener(\"scroll\", function() { if (objDiv.scrollHeight - objDiv.scrollTop === objDiv.clientHeight) { document.chatScrollPos = false; } else { document.chatScrollPos = objDiv.scrollTop; } })\n";
				$markup = $markup . "</script>\n";
				$result = array (
						'#markup' => $markup 
				);
			} else {
				$result = array (
						'#markup' => t ( 'Earth Eternal live chat not available. Status %status', array (
								'%status' => $request_headers->http_code 
						) ) 
				);
			}
			return $result;
		
		case 'eeaccountinfo' :
			global $user;
			$is_player = true;
			$account = $user;
			$req_uri = request_uri ();
			$parts = explode ( "/", $req_uri );
			for($i = 0; $i < count ( $parts ); $i ++) {
				$el = $parts [$i];
				if ($el == "user") {
					if ($i + 1 < count ( $parts )) {
						$el = $parts [$i + 1];
						if (( string ) ( int ) $el == $el) {
							$account = user_load ( $el );
							$is_player = false;
						}
					}
				}
			}
			
			$urlp = "/user/" . urlencode ( $account->name );
			list ( $data, $request_headers ) = _doHTTP ( $urlp );
			$markup = "<div id=\"block-eechat-eeaccountinfo-accountinfo\">\n";
			if (isset ( $request_headers->http_code ) && $request_headers->http_code == 0) {
				$markup = $markup . t ( 'Earth Eternal is OFFLINE' );
			} else if (isset ( $request_headers->http_code ) && $request_headers->http_code < 300 && $request_headers->http_code >= 200) {
				$eeuser = json_decode ( $data );
				
				if ($eeuser->characters != null) {
					$markup = $markup . "<div class=\"account-details\">\n";
					$markup = $markup . "<h2>Account</h2>\n";
					
					$markup = $markup . "<div class=\"last-login\">\n";
					$markup = $markup . "<span class=\"last-login-label player-stat-label\">Last Login</span>\n";
					$markup = $markup . "<span class=\"last-login-value player-stat-value\">" . $eeuser->logon . "</span>\n";
					$markup = $markup . "</div>\n";
					
					$markup = $markup . _get_stats_html ( $eeuser->playerStats );
					
					$markup = $markup . "</div>\n";
					$markup = $markup . "<hr class=\"fancy-small-divider\"/>\n";
					$markup = $markup . "<div class=\"character-details\">\n";
					$markup = $markup . "<h2>Characters</h2>\n";
					$markup = $markup . "<ul>\n";
					foreach ( $eeuser->characters as $character ) {
						$markup = $markup . "<li>\n";
						$markup = $markup . "<span class=\"character-name\"><a href=\"/character/" . urlencode ( $character->name ) . "\">" . $character->name . "</a></span>\n";
						$markup = $markup . "<span class=\"character-level\">Level " . $character->level . "</span>\n";
						$markup = $markup . "<span class=\"character-level\">" . _get_class_name ( $character->profession ) . "</span>\n";
						$markup = $markup . "</li>";
					}
					$markup = $markup . "</ul>\n";
					$markup = $markup . "</div>\n";
				} else {
					$markup = $markup . "<div class=\"no-characters\">\n";
					if ($is_player) {
						$markup = $markup . "You have no characters! <a href=\"/launch\">Play Now</a> to create one.";
					} else {
						$markup = $markup . "Player has no characters.";
					}
					$markup = $markup . "</div>\n";
				}
			} else {
				if ($request_headers->http_code == 404) {
					$markup = $markup . "<div class=\"no-account\">";
					if ($is_player) {
						$markup = $markup . "You have no game account! <a href=\"/launch\">Play Now</a> to create one.";
					} else {
						$markup = $markup . "Player has no characters.";
					}
					$markup = $markup . "</div>\n";
				} else {
					$markup = t ( 'Earth Eternal user not available. ' . $account->name . '. Status %status', array (
							'%status' => $request_headers->http_code 
					) );
				}
			}
			$markup = $markup . "</div>\n";
			$result = array (
					'#markup' => $markup 
			);
			return $result;
	}
}

function _get_api_url() {
	return variable_get ( 'eechat_url', t ( 'http://server.theanubianwar.com/api' ) );
}


function _doHTTP($path, $method = 'GET', $postdata = false) {
	$curl = curl_init ();
	curl_setopt ( $curl, CURLOPT_VERBOSE, TRUE );
	curl_setopt ( $curl, CURLOPT_RETURNTRANSFER, 1 );
	curl_setopt ( $curl, CURLOPT_HEADER, false );
	curl_setopt ( $curl, CURLOPT_AUTOREFERER, TRUE );
	curl_setopt ( $curl, CURLOPT_CONNECTTIMEOUT, 5 );
	
	if($method === 'GET')
		curl_setopt ( $curl, CURLOPT_CUSTOMREQUEST, 'GET' );
	else {
		$fields_string = "";
		foreach($postdata as $key=>$value) { 
			$fields_string .= $key.'='.$value.'&'; 
		}
		rtrim($fields_string, '&');
		curl_setopt($curl,CURLOPT_POST, count($postdata));
		curl_setopt($curl,CURLOPT_POSTFIELDS, $fields_string);
	}
	
	curl_setopt ( $curl, CURLOPT_URL, _get_api_url() . $path );
	
	$data = curl_exec ( $curl );
	$request_headers = ( object ) curl_getinfo ( $curl );
	curl_close ( $curl );
	
	return array (
			$data,
			$request_headers 
	);
}
function _get_stats_html($stats) {
	$markup = "<div class=\"total-kills\">\n";
	$markup = $markup . "<span class=\"total-kills-label player-stat-label\">Total Kills</span>\n";
	$markup = $markup . "<span class=\"total-kills-value player-stat-value\">" . $stats->kills . "</span>\n";
	$markup = $markup . "</div>\n";
	
	$markup = $markup . "<div class=\"total-deaths\">\n";
	$markup = $markup . "<span class=\"total-deaths-label player-stat-label\">Total Deaths</span>\n";
	$markup = $markup . "<span class=\"total-deaths-value player-stat-value\">" . $stats->deaths . "</span>\n";
	$markup = $markup . "</div>\n";
	
	$markup = $markup . "<div class=\"total-pvp-kills\">\n";
	$markup = $markup . "<span class=\"total-pvp-kills-label player-stat-label\">Total PVP Kills</span>\n";
	$markup = $markup . "<span class=\"total-pvp-kills-value player-stat-value\">" . $stats->pvpKills . "</span>\n";
	$markup = $markup . "</div>\n";
	
	$markup = $markup . "<div class=\"total-pvp-deaths\">\n";
	$markup = $markup . "<span class=\"total-pvp-deaths-label player-stat-label\">Total PVP Deaths</span>\n";
	$markup = $markup . "<span class=\"total-pvp-deaths-value player-stat-value\">" . $stats->pvpDeaths . "</span>\n";
	$markup = $markup . "</div>\n";
	
	return $markup;
}
function _get_race_name($raceid) {
	$races = array (
			'a' => "Anura",
			'v' => "Atavian",
			'd' => "Bandicoon",
			'b' => "Bounder",
			'r' => "Broccan",
			'c' => "Caprican",
			'w' => "Clockwork",
			'p' => "Cyclops",
			'e' => "Daemon",
			'q' => "Dryad",
			'g' => "Fangren",
			'f' => "Feline",
			'x' => "Foxen",
			'h' => "Hart",
			'o' => "Longtail",
			'l' => "Lisian",
			'n' => "Noctari",
			't' => "Taurian",
			's' => "Troblin",
			'k' => "Tusken",
			'u' => "Ursine",
			'y' => "Yeti" 
	);
	
	return $races[$raceid];
}

function _get_rank($rankid) {

	switch($rankid) {
		case 4:
			return "Leader";
		case 3:
			return "Officer";
		case 2:
			return "Member";
		case 1:
			return "Initiate";
	}
	return "None";
}
function _get_class_name($classid) {
	$classname = "Unknown";
	switch ($classid) {
		case 1 :
			$classname = "Knight";
			break;
		case 2 :
			$classname = "Rogue";
			break;
		case 3 :
			$classname = "Mage";
			break;
		case 4 :
			$classname = "Druid";
			break;
	}
	return $classname;
}

function _render_cs_item($shopitem, $showbuy = false) {
	$markup = "<div class=\"credit-shop-item\">\n";
	$markup = $markup . "<h1>" . $shopitem->computedTitle . "</h1>\n";
	$markup = $markup . "<div class=\"icon\">\n";
	$markup = $markup . "<div class=\"icon-background\" style=\"background-image: url(/sites/default/files/gameicons/" . $shopitem ->icon2 . "); \">\n";
	$markup = $markup . "<img class=\"icon-foreground\" src=\"/sites/default/files/gameicons/" . $shopitem ->icon1 . "\"/>\n";
	$markup = $markup . "</div>\n";
	$markup = $markup . "</div>\n";
	$markup = $markup . "<div class=\"status\">\n";
	$markup = $markup . "<div class=\"status-icon status-icon-" . $shopitem->status . "\">\n";
	$markup = $markup . "</div>\n";
	$markup = $markup . "</div>\n";
	$markup = $markup . "<div class=\"description\">" . $shopitem->description . "</div>\n";
	$markup = $markup . "<hr class=\"clearfix fancy-small-divider\"/>\n";
	if($shopitem->currency === 'CREDITS' ||  $shopitem->currency === 'CREDITS+COPPER') {
		$markup = $markup . "<div class=\"clearfix price credit-price\">\n";
		$markup = $markup . "<label>Credits</label>\n";
		$markup = $markup . "<span>" . $shopitem->credits . "</span>\n";
		$markup = $markup . "</div>\n";
	}
	if($shopitem->currency === 'COPPER' ||  $shopitem->currency === 'CREDITS+COPPER') {
		$markup = $markup . "<div class=\"clearfix price credit-price\">\n";
		$markup = $markup . "<label>Copper</label>\n";
		$markup = $markup . "<span>" . $shopitem->copper . "</span>\n";
		$markup = $markup . "</div>\n";
	}
	
	if($showbuy) {
		$markup = $markup . "<div class=\"item-actions\">\n";
		$markup = $markup . "<a class=\"small-styled-button item-action item-action-buy\" href=\"/buy/" . $shopitem->id ."\">Buy!</a>\n";
		$markup = $markup . "</div>\n";
	}
	
	$markup = $markup . "</div>\n";
	
	return $markup;
}

function _render_chat($chat) {
	$markup = "";
	foreach ( $chat as $message ) {
	
		$doing = $m = 0 === strpos ( $message->message, "*");
		$msg = $message->message;
	
		if($doing) {
			$msg = substr ( $msg, 1 );
			while (strpos($msg, "*", strlen($msg) - strlen("*")) !== false)
				$msg = substr ( $msg, 0, strlen($msg) - 1 );
		}
	
		if($message->channel->friendly != '/syschat' && $message->channel->friendly != 'NULL') {
			$m = $message->sender;
			if(!$doing)
				$m = $m . " says: " . $msg;
			else
				$m = $m . " " . strtolower(substr($msg, 0, 1)) . substr($msg, 1);
		}
		else
			$m = $msg;
	
		$clazz = "channel-" . str_replace("/", "", $message->channel->friendly);

		if($doing)
			$clazz = $clazz . " doing";
	
		$markup = $markup . "<li class=\"" . $clazz . "\"><span class=\"chat-timestamp\">" . htmlentities ( $message->timeReadable ) . "</span> - <span class=\"chat-message\">" . htmlentities($m)  . "</span></li>";
	}
	return $markup;
}


/**
* @} End of "defgroup eechat".
*/
